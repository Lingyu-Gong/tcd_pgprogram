// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ConvertScaleAbs273 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_data_stream_V_dout,
        p_src_data_stream_V_empty_n,
        p_src_data_stream_V_read,
        p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n,
        p_dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state15 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] p_src_data_stream_V_dout;
input   p_src_data_stream_V_empty_n;
output   p_src_data_stream_V_read;
output  [7:0] p_dst_data_stream_V_din;
input   p_dst_data_stream_V_full_n;
output   p_dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_V_read;
reg p_dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln2527_reg_788;
reg    p_dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter10_reg;
reg   [10:0] j_0_reg_164;
wire   [0:0] icmp_ln2526_fu_178_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] i_fu_184_p2;
reg   [9:0] i_reg_783;
wire   [0:0] icmp_ln2527_fu_190_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
reg    ap_block_state14_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter1_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter2_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter3_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter4_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter5_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter6_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter7_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter8_reg;
reg   [0:0] icmp_ln2527_reg_788_pp0_iter9_reg;
wire   [10:0] j_fu_196_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_reg_797;
wire   [63:0] grp_fu_175_p1;
reg   [63:0] x_assign_reg_807;
wire   [51:0] tmp_V_3_fu_223_p1;
reg   [51:0] tmp_V_3_reg_812;
wire   [0:0] icmp_ln833_fu_227_p2;
reg   [0:0] icmp_ln833_reg_818;
reg   [0:0] icmp_ln833_reg_818_pp0_iter9_reg;
reg   [0:0] icmp_ln833_reg_818_pp0_iter10_reg;
wire   [0:0] icmp_ln571_fu_237_p2;
reg   [0:0] icmp_ln571_reg_824;
reg   [0:0] icmp_ln571_reg_824_pp0_iter9_reg;
reg   [0:0] icmp_ln571_reg_824_pp0_iter10_reg;
wire   [11:0] F2_fu_243_p2;
reg   [11:0] F2_reg_830;
wire   [0:0] icmp_ln581_fu_249_p2;
reg   [0:0] icmp_ln581_reg_838;
wire  signed [11:0] F2_2_fu_261_p3;
reg  signed [11:0] F2_2_reg_844;
reg  signed [11:0] F2_2_reg_844_pp0_iter9_reg;
wire   [0:0] icmp_ln582_fu_269_p2;
reg   [0:0] icmp_ln582_reg_850;
reg   [0:0] icmp_ln582_reg_850_pp0_iter9_reg;
wire   [7:0] trunc_ln583_fu_275_p1;
reg   [7:0] trunc_ln583_reg_857;
reg   [7:0] trunc_ln583_reg_857_pp0_iter9_reg;
wire   [0:0] icmp_ln585_fu_279_p2;
reg   [0:0] icmp_ln585_reg_863;
wire   [0:0] icmp_ln603_fu_295_p2;
reg   [0:0] icmp_ln603_reg_868;
reg   [0:0] icmp_ln603_reg_868_pp0_iter9_reg;
wire   [0:0] icmp_ln837_fu_301_p2;
reg   [0:0] icmp_ln837_reg_874;
reg   [0:0] icmp_ln837_reg_874_pp0_iter10_reg;
wire   [0:0] p_Result_7_fu_371_p3;
reg   [0:0] p_Result_7_reg_880;
wire   [7:0] p_Val2_15_fu_383_p2;
reg   [7:0] p_Val2_15_reg_885;
wire   [0:0] and_ln581_fu_408_p2;
reg   [0:0] and_ln581_reg_891;
wire   [0:0] and_ln403_fu_413_p2;
reg   [0:0] and_ln403_reg_896;
wire   [0:0] or_ln581_fu_419_p2;
reg   [0:0] or_ln581_reg_901;
wire   [0:0] and_ln603_2_fu_440_p2;
reg   [0:0] and_ln603_2_reg_906;
reg   [0:0] and_ln603_2_reg_906_pp0_iter10_reg;
wire   [0:0] icmp_ln621_fu_464_p2;
reg   [0:0] icmp_ln621_reg_911;
reg   [0:0] icmp_ln621_reg_911_pp0_iter10_reg;
wire   [0:0] xor_ln621_1_fu_478_p2;
reg   [0:0] xor_ln621_1_reg_916;
wire   [0:0] Range1_all_ones_1_fu_504_p2;
reg   [0:0] Range1_all_ones_1_reg_923;
reg   [0:0] tmp_54_reg_930;
wire   [0:0] icmp_ln631_fu_518_p2;
reg   [0:0] icmp_ln631_reg_935;
wire   [53:0] zext_ln635_fu_524_p1;
reg   [53:0] zext_ln635_reg_941;
wire   [53:0] Range2_V_1_fu_528_p2;
reg   [53:0] Range2_V_1_reg_946;
wire   [0:0] Range1_all_zeros_1_fu_540_p2;
reg   [0:0] Range1_all_zeros_1_reg_952;
wire   [0:0] and_ln642_fu_558_p2;
reg   [0:0] and_ln642_reg_957;
wire   [7:0] p_Val2_16_fu_611_p3;
reg   [7:0] p_Val2_16_reg_963;
wire   [0:0] select_ln639_fu_681_p3;
reg   [0:0] select_ln639_reg_969;
wire   [0:0] select_ln639_1_fu_696_p3;
reg   [0:0] select_ln639_1_reg_974;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg   [9:0] i_0_reg_153;
reg    ap_block_state1;
wire    ap_CS_fsm_state15;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] grp_fu_175_p0;
wire   [63:0] p_Val2_s_fu_206_p1;
wire   [10:0] tmp_V_fu_213_p4;
wire   [62:0] trunc_ln368_fu_209_p1;
wire   [11:0] zext_ln461_fu_233_p1;
wire   [11:0] sub_ln581_fu_255_p2;
wire   [8:0] tmp_50_fu_285_p4;
wire   [52:0] tmp_1_i_fu_306_p3;
wire  signed [31:0] sext_ln581_fu_317_p1;
wire   [53:0] p_Result_6_fu_313_p1;
wire   [53:0] zext_ln586_fu_320_p1;
wire   [53:0] ashr_ln586_fu_324_p2;
wire   [7:0] trunc_ln586_fu_330_p1;
wire   [11:0] add_ln591_fu_346_p2;
wire   [31:0] zext_ln591_fu_351_p1;
wire   [0:0] icmp_ln591_fu_341_p2;
wire   [0:0] p_Result_s_fu_355_p3;
wire   [7:0] p_Val2_14_fu_334_p3;
wire   [0:0] qb_fu_363_p3;
wire   [7:0] zext_ln415_fu_379_p1;
wire   [0:0] tmp_52_fu_389_p3;
wire   [0:0] xor_ln582_fu_403_p2;
wire   [0:0] xor_ln603_fu_423_p2;
wire   [0:0] or_ln603_fu_428_p2;
wire   [0:0] xor_ln416_fu_397_p2;
wire   [0:0] and_ln603_1_fu_434_p2;
wire  signed [11:0] pos1_fu_446_p2;
wire  signed [11:0] pos2_fu_455_p2;
wire   [0:0] tmp_53_fu_470_p3;
wire  signed [31:0] sext_ln618_fu_451_p1;
wire   [53:0] zext_ln623_fu_484_p1;
wire   [53:0] ashr_ln623_fu_488_p2;
wire   [0:0] lD_fu_494_p1;
wire   [0:0] and_ln621_fu_498_p2;
wire  signed [31:0] sext_ln619_fu_460_p1;
wire   [0:0] xor_ln639_1_fu_546_p2;
wire   [0:0] icmp_ln642_fu_534_p2;
wire   [0:0] or_ln639_fu_552_p2;
wire   [7:0] trunc_ln581_fu_564_p1;
wire   [7:0] select_ln582_fu_572_p3;
wire   [0:0] xor_ln403_fu_584_p2;
wire   [0:0] and_ln403_1_fu_589_p2;
wire   [7:0] select_ln403_fu_578_p3;
wire   [0:0] xor_ln581_fu_601_p2;
wire   [0:0] and_ln603_fu_606_p2;
wire   [7:0] shl_ln604_fu_567_p2;
wire   [7:0] select_ln403_1_fu_594_p3;
wire   [0:0] xor_ln631_fu_619_p2;
wire   [53:0] r_V_fu_629_p2;
wire   [0:0] and_ln631_fu_624_p2;
wire   [0:0] Range2_all_ones_fu_634_p2;
wire   [0:0] select_ln631_fu_639_p3;
wire   [0:0] icmp_ln641_fu_656_p2;
wire   [0:0] Range1_all_zeros_fu_661_p2;
wire   [0:0] and_ln639_fu_647_p2;
wire   [0:0] Range1_all_ones_fu_651_p2;
wire   [0:0] select_ln642_fu_676_p3;
wire   [0:0] or_ln645_fu_672_p2;
wire   [0:0] and_ln641_fu_666_p2;
wire   [0:0] select_ln642_1_fu_689_p3;
wire   [0:0] xor_ln621_fu_713_p2;
wire   [0:0] deleted_zeros_fu_708_p3;
wire   [0:0] or_ln658_fu_718_p2;
wire   [0:0] and_ln428_1_fu_731_p2;
wire   [0:0] xor_ln428_fu_735_p2;
wire   [0:0] and_ln571_fu_741_p2;
wire   [0:0] and_ln428_fu_704_p2;
wire   [0:0] or_ln571_fu_746_p2;
wire   [0:0] or_ln571_1_fu_759_p2;
wire   [0:0] xor_ln571_fu_764_p2;
wire   [7:0] select_ln340_fu_724_p3;
wire   [7:0] select_ln571_fu_752_p3;
reg    grp_fu_175_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

sobel_accel_sitodtde #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sobel_accel_sitodtde_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_175_p0),
    .ce(grp_fu_175_ce),
    .dout(grp_fu_175_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln2526_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln2526_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if (((icmp_ln2526_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_reg_153 <= i_reg_783;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_153 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_0_reg_164 <= j_fu_196_p2;
    end else if (((icmp_ln2526_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_164 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788_pp0_iter7_reg == 1'd0))) begin
        F2_2_reg_844 <= F2_2_fu_261_p3;
        F2_reg_830 <= F2_fu_243_p2;
        icmp_ln571_reg_824 <= icmp_ln571_fu_237_p2;
        icmp_ln581_reg_838 <= icmp_ln581_fu_249_p2;
        icmp_ln582_reg_850 <= icmp_ln582_fu_269_p2;
        icmp_ln585_reg_863 <= icmp_ln585_fu_279_p2;
        icmp_ln603_reg_868 <= icmp_ln603_fu_295_p2;
        icmp_ln833_reg_818 <= icmp_ln833_fu_227_p2;
        tmp_V_3_reg_812 <= tmp_V_3_fu_223_p1;
        trunc_ln583_reg_857 <= trunc_ln583_fu_275_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        F2_2_reg_844_pp0_iter9_reg <= F2_2_reg_844;
        and_ln603_2_reg_906_pp0_iter10_reg <= and_ln603_2_reg_906;
        icmp_ln2527_reg_788_pp0_iter10_reg <= icmp_ln2527_reg_788_pp0_iter9_reg;
        icmp_ln2527_reg_788_pp0_iter2_reg <= icmp_ln2527_reg_788_pp0_iter1_reg;
        icmp_ln2527_reg_788_pp0_iter3_reg <= icmp_ln2527_reg_788_pp0_iter2_reg;
        icmp_ln2527_reg_788_pp0_iter4_reg <= icmp_ln2527_reg_788_pp0_iter3_reg;
        icmp_ln2527_reg_788_pp0_iter5_reg <= icmp_ln2527_reg_788_pp0_iter4_reg;
        icmp_ln2527_reg_788_pp0_iter6_reg <= icmp_ln2527_reg_788_pp0_iter5_reg;
        icmp_ln2527_reg_788_pp0_iter7_reg <= icmp_ln2527_reg_788_pp0_iter6_reg;
        icmp_ln2527_reg_788_pp0_iter8_reg <= icmp_ln2527_reg_788_pp0_iter7_reg;
        icmp_ln2527_reg_788_pp0_iter9_reg <= icmp_ln2527_reg_788_pp0_iter8_reg;
        icmp_ln571_reg_824_pp0_iter10_reg <= icmp_ln571_reg_824_pp0_iter9_reg;
        icmp_ln571_reg_824_pp0_iter9_reg <= icmp_ln571_reg_824;
        icmp_ln582_reg_850_pp0_iter9_reg <= icmp_ln582_reg_850;
        icmp_ln603_reg_868_pp0_iter9_reg <= icmp_ln603_reg_868;
        icmp_ln621_reg_911_pp0_iter10_reg <= icmp_ln621_reg_911;
        icmp_ln833_reg_818_pp0_iter10_reg <= icmp_ln833_reg_818_pp0_iter9_reg;
        icmp_ln833_reg_818_pp0_iter9_reg <= icmp_ln833_reg_818;
        icmp_ln837_reg_874_pp0_iter10_reg <= icmp_ln837_reg_874;
        trunc_ln583_reg_857_pp0_iter9_reg <= trunc_ln583_reg_857;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788_pp0_iter8_reg == 1'd0))) begin
        Range1_all_ones_1_reg_923 <= Range1_all_ones_1_fu_504_p2;
        Range1_all_zeros_1_reg_952 <= Range1_all_zeros_1_fu_540_p2;
        Range2_V_1_reg_946 <= Range2_V_1_fu_528_p2;
        and_ln403_reg_896 <= and_ln403_fu_413_p2;
        and_ln581_reg_891 <= and_ln581_fu_408_p2;
        and_ln603_2_reg_906 <= and_ln603_2_fu_440_p2;
        and_ln642_reg_957 <= and_ln642_fu_558_p2;
        icmp_ln621_reg_911 <= icmp_ln621_fu_464_p2;
        icmp_ln631_reg_935 <= icmp_ln631_fu_518_p2;
        icmp_ln837_reg_874 <= icmp_ln837_fu_301_p2;
        or_ln581_reg_901 <= or_ln581_fu_419_p2;
        p_Result_7_reg_880 <= p_Val2_14_fu_334_p3[32'd7];
        p_Val2_15_reg_885 <= p_Val2_15_fu_383_p2;
        tmp_54_reg_930 <= pos2_fu_455_p2[32'd11];
        xor_ln621_1_reg_916 <= xor_ln621_1_fu_478_p2;
        zext_ln635_reg_941[31 : 0] <= zext_ln635_fu_524_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_783 <= i_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2527_reg_788 <= icmp_ln2527_fu_190_p2;
        icmp_ln2527_reg_788_pp0_iter1_reg <= icmp_ln2527_reg_788;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788_pp0_iter9_reg == 1'd0))) begin
        p_Val2_16_reg_963 <= p_Val2_16_fu_611_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd0 == and_ln603_2_reg_906) & (icmp_ln2527_reg_788_pp0_iter9_reg == 1'd0))) begin
        select_ln639_1_reg_974 <= select_ln639_1_fu_696_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788_pp0_iter9_reg == 1'd0) & (1'd1 == and_ln603_2_reg_906))) begin
        select_ln639_reg_969 <= select_ln639_fu_681_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_797 <= p_src_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788_pp0_iter6_reg == 1'd0))) begin
        x_assign_reg_807 <= grp_fu_175_p1;
    end
end

always @ (*) begin
    if ((icmp_ln2527_fu_190_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2526_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2526_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_175_ce = 1'b1;
    end else begin
        grp_fu_175_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2527_reg_788_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        p_dst_data_stream_V_blk_n = p_dst_data_stream_V_full_n;
    end else begin
        p_dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788_pp0_iter10_reg == 1'd0) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        p_dst_data_stream_V_write = 1'b1;
    end else begin
        p_dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2527_reg_788 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_blk_n = p_src_data_stream_V_empty_n;
    end else begin
        p_src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2527_reg_788 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_src_data_stream_V_read = 1'b1;
    end else begin
        p_src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln2526_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln2527_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter10 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((icmp_ln2527_fu_190_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_2_fu_261_p3 = ((icmp_ln581_fu_249_p2[0:0] === 1'b1) ? F2_fu_243_p2 : sub_ln581_fu_255_p2);

assign F2_fu_243_p2 = (12'd1075 - zext_ln461_fu_233_p1);

assign Range1_all_ones_1_fu_504_p2 = (icmp_ln621_fu_464_p2 & and_ln621_fu_498_p2);

assign Range1_all_ones_fu_651_p2 = (select_ln631_fu_639_p3 & Range1_all_ones_1_reg_923);

assign Range1_all_zeros_1_fu_540_p2 = ((p_Result_6_fu_313_p1 == 54'd0) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_661_p2 = (1'd1 ^ Range1_all_ones_1_reg_923);

assign Range2_V_1_fu_528_p2 = p_Result_6_fu_313_p1 >> zext_ln635_fu_524_p1;

assign Range2_all_ones_fu_634_p2 = ((Range2_V_1_reg_946 == r_V_fu_629_p2) ? 1'b1 : 1'b0);

assign add_ln591_fu_346_p2 = ($signed(12'd4095) + $signed(F2_reg_830));

assign and_ln403_1_fu_589_p2 = (xor_ln403_fu_584_p2 & and_ln581_reg_891);

assign and_ln403_fu_413_p2 = (p_Result_7_fu_371_p3 & and_ln581_fu_408_p2);

assign and_ln428_1_fu_731_p2 = (icmp_ln837_reg_874_pp0_iter10_reg & icmp_ln833_reg_818_pp0_iter10_reg);

assign and_ln428_fu_704_p2 = (icmp_ln837_reg_874_pp0_iter10_reg & icmp_ln833_reg_818_pp0_iter10_reg);

assign and_ln571_fu_741_p2 = (xor_ln428_fu_735_p2 & icmp_ln571_reg_824_pp0_iter10_reg);

assign and_ln581_fu_408_p2 = (xor_ln582_fu_403_p2 & icmp_ln581_reg_838);

assign and_ln603_1_fu_434_p2 = (xor_ln416_fu_397_p2 & or_ln603_fu_428_p2);

assign and_ln603_2_fu_440_p2 = (and_ln603_1_fu_434_p2 & and_ln403_fu_413_p2);

assign and_ln603_fu_606_p2 = (xor_ln581_fu_601_p2 & icmp_ln603_reg_868_pp0_iter9_reg);

assign and_ln621_fu_498_p2 = (xor_ln621_1_fu_478_p2 & lD_fu_494_p1);

assign and_ln631_fu_624_p2 = (xor_ln631_fu_619_p2 & icmp_ln631_reg_935);

assign and_ln639_fu_647_p2 = (xor_ln621_1_reg_916 & icmp_ln631_reg_935);

assign and_ln641_fu_666_p2 = (icmp_ln641_fu_656_p2 & Range1_all_zeros_fu_661_p2);

assign and_ln642_fu_558_p2 = (or_ln639_fu_552_p2 & icmp_ln642_fu_534_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln2527_reg_788_pp0_iter10_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((icmp_ln2527_reg_788 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln2527_reg_788_pp0_iter10_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((icmp_ln2527_reg_788 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln2527_reg_788_pp0_iter10_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((icmp_ln2527_reg_788 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp0_stage0_iter11 = ((icmp_ln2527_reg_788_pp0_iter10_reg == 1'd0) & (p_dst_data_stream_V_full_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln2527_reg_788 == 1'd0) & (p_src_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln586_fu_324_p2 = $signed(p_Result_6_fu_313_p1) >>> zext_ln586_fu_320_p1;

assign ashr_ln623_fu_488_p2 = $signed(p_Result_6_fu_313_p1) >>> zext_ln623_fu_484_p1;

assign deleted_zeros_fu_708_p3 = ((and_ln603_2_reg_906_pp0_iter10_reg[0:0] === 1'b1) ? select_ln639_reg_969 : select_ln639_1_reg_974);

assign grp_fu_175_p0 = $signed(tmp_reg_797);

assign i_fu_184_p2 = (i_0_reg_153 + 10'd1);

assign icmp_ln2526_fu_178_p2 = ((i_0_reg_153 == 10'd720) ? 1'b1 : 1'b0);

assign icmp_ln2527_fu_190_p2 = ((j_0_reg_164 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_237_p2 = ((trunc_ln368_fu_209_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_249_p2 = (($signed(F2_fu_243_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_269_p2 = ((tmp_V_fu_213_p4 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_279_p2 = ((F2_2_fu_261_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_341_p2 = (($signed(F2_reg_830) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_295_p2 = ((tmp_50_fu_285_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln621_fu_464_p2 = (($signed(pos1_fu_446_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln631_fu_518_p2 = (($signed(pos2_fu_455_p2) < $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln641_fu_656_p2 = ((Range2_V_1_reg_946 == 54'd0) ? 1'b1 : 1'b0);

assign icmp_ln642_fu_534_p2 = ((pos2_fu_455_p2 == 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln833_fu_227_p2 = ((tmp_V_fu_213_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln837_fu_301_p2 = ((tmp_V_3_reg_812 != 52'd0) ? 1'b1 : 1'b0);

assign j_fu_196_p2 = (j_0_reg_164 + 11'd1);

assign lD_fu_494_p1 = ashr_ln623_fu_488_p2[0:0];

assign or_ln571_1_fu_759_p2 = (icmp_ln571_reg_824_pp0_iter10_reg | and_ln428_fu_704_p2);

assign or_ln571_fu_746_p2 = (and_ln571_fu_741_p2 | and_ln428_fu_704_p2);

assign or_ln581_fu_419_p2 = (icmp_ln582_reg_850 | icmp_ln581_reg_838);

assign or_ln603_fu_428_p2 = (xor_ln603_fu_423_p2 | or_ln581_fu_419_p2);

assign or_ln639_fu_552_p2 = (xor_ln639_1_fu_546_p2 | tmp_53_fu_470_p3);

assign or_ln645_fu_672_p2 = (xor_ln621_1_reg_916 | Range1_all_zeros_1_reg_952);

assign or_ln658_fu_718_p2 = (xor_ln621_fu_713_p2 | deleted_zeros_fu_708_p3);

assign p_Result_6_fu_313_p1 = tmp_1_i_fu_306_p3;

assign p_Result_7_fu_371_p3 = p_Val2_14_fu_334_p3[32'd7];

assign p_Result_s_fu_355_p3 = p_Result_6_fu_313_p1[zext_ln591_fu_351_p1];

assign p_Val2_14_fu_334_p3 = ((icmp_ln585_reg_863[0:0] === 1'b1) ? trunc_ln586_fu_330_p1 : 8'd0);

assign p_Val2_15_fu_383_p2 = (p_Val2_14_fu_334_p3 + zext_ln415_fu_379_p1);

assign p_Val2_16_fu_611_p3 = ((and_ln603_fu_606_p2[0:0] === 1'b1) ? shl_ln604_fu_567_p2 : select_ln403_1_fu_594_p3);

assign p_Val2_s_fu_206_p1 = x_assign_reg_807;

assign p_dst_data_stream_V_din = ((xor_ln571_fu_764_p2[0:0] === 1'b1) ? select_ln340_fu_724_p3 : select_ln571_fu_752_p3);

assign pos1_fu_446_p2 = (12'd8 + F2_reg_830);

assign pos2_fu_455_p2 = (12'd9 + F2_reg_830);

assign qb_fu_363_p3 = ((icmp_ln591_fu_341_p2[0:0] === 1'b1) ? 1'd0 : p_Result_s_fu_355_p3);

assign r_V_fu_629_p2 = 54'd18014398509481983 >> zext_ln635_reg_941;

assign select_ln340_fu_724_p3 = ((or_ln658_fu_718_p2[0:0] === 1'b1) ? p_Val2_16_reg_963 : 8'd255);

assign select_ln403_1_fu_594_p3 = ((and_ln403_1_fu_589_p2[0:0] === 1'b1) ? p_Val2_15_reg_885 : select_ln403_fu_578_p3);

assign select_ln403_fu_578_p3 = ((and_ln403_reg_896[0:0] === 1'b1) ? p_Val2_15_reg_885 : select_ln582_fu_572_p3);

assign select_ln571_fu_752_p3 = ((or_ln571_fu_746_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_16_reg_963);

assign select_ln582_fu_572_p3 = ((icmp_ln582_reg_850_pp0_iter9_reg[0:0] === 1'b1) ? trunc_ln583_reg_857_pp0_iter9_reg : 8'd0);

assign select_ln631_fu_639_p3 = ((and_ln631_fu_624_p2[0:0] === 1'b1) ? Range2_all_ones_fu_634_p2 : xor_ln631_fu_619_p2);

assign select_ln639_1_fu_696_p3 = ((and_ln639_fu_647_p2[0:0] === 1'b1) ? and_ln641_fu_666_p2 : select_ln642_1_fu_689_p3);

assign select_ln639_fu_681_p3 = ((and_ln639_fu_647_p2[0:0] === 1'b1) ? Range1_all_ones_fu_651_p2 : select_ln642_fu_676_p3);

assign select_ln642_1_fu_689_p3 = ((and_ln642_reg_957[0:0] === 1'b1) ? Range1_all_zeros_fu_661_p2 : or_ln645_fu_672_p2);

assign select_ln642_fu_676_p3 = ((and_ln642_reg_957[0:0] === 1'b1) ? Range1_all_ones_1_reg_923 : xor_ln621_1_reg_916);

assign sext_ln581_fu_317_p1 = F2_2_reg_844;

assign sext_ln618_fu_451_p1 = pos1_fu_446_p2;

assign sext_ln619_fu_460_p1 = pos2_fu_455_p2;

assign shl_ln604_fu_567_p2 = trunc_ln583_reg_857_pp0_iter9_reg << trunc_ln581_fu_564_p1;

assign sub_ln581_fu_255_p2 = (12'd0 - F2_fu_243_p2);

assign tmp_1_i_fu_306_p3 = {{1'd1}, {tmp_V_3_reg_812}};

assign tmp_50_fu_285_p4 = {{F2_2_fu_261_p3[11:3]}};

assign tmp_52_fu_389_p3 = p_Val2_15_fu_383_p2[32'd7];

assign tmp_53_fu_470_p3 = pos1_fu_446_p2[32'd11];

assign tmp_V_3_fu_223_p1 = p_Val2_s_fu_206_p1[51:0];

assign tmp_V_fu_213_p4 = {{p_Val2_s_fu_206_p1[62:52]}};

assign trunc_ln368_fu_209_p1 = p_Val2_s_fu_206_p1[62:0];

assign trunc_ln581_fu_564_p1 = F2_2_reg_844_pp0_iter9_reg[7:0];

assign trunc_ln583_fu_275_p1 = p_Val2_s_fu_206_p1[7:0];

assign trunc_ln586_fu_330_p1 = ashr_ln586_fu_324_p2[7:0];

assign xor_ln403_fu_584_p2 = (p_Result_7_reg_880 ^ 1'd1);

assign xor_ln416_fu_397_p2 = (tmp_52_fu_389_p3 ^ 1'd1);

assign xor_ln428_fu_735_p2 = (1'd1 ^ and_ln428_1_fu_731_p2);

assign xor_ln571_fu_764_p2 = (or_ln571_1_fu_759_p2 ^ 1'd1);

assign xor_ln581_fu_601_p2 = (or_ln581_reg_901 ^ 1'd1);

assign xor_ln582_fu_403_p2 = (icmp_ln582_reg_850 ^ 1'd1);

assign xor_ln603_fu_423_p2 = (icmp_ln603_reg_868 ^ 1'd1);

assign xor_ln621_1_fu_478_p2 = (tmp_53_fu_470_p3 ^ 1'd1);

assign xor_ln621_fu_713_p2 = (icmp_ln621_reg_911_pp0_iter10_reg ^ 1'd1);

assign xor_ln631_fu_619_p2 = (tmp_54_reg_930 ^ 1'd1);

assign xor_ln639_1_fu_546_p2 = (icmp_ln631_fu_518_p2 ^ 1'd1);

assign zext_ln415_fu_379_p1 = qb_fu_363_p3;

assign zext_ln461_fu_233_p1 = tmp_V_fu_213_p4;

assign zext_ln586_fu_320_p1 = $unsigned(sext_ln581_fu_317_p1);

assign zext_ln591_fu_351_p1 = add_ln591_fu_346_p2;

assign zext_ln623_fu_484_p1 = $unsigned(sext_ln618_fu_451_p1);

assign zext_ln635_fu_524_p1 = $unsigned(sext_ln619_fu_460_p1);

always @ (posedge ap_clk) begin
    zext_ln635_reg_941[53:32] <= 22'b0000000000000000000000;
end

endmodule //ConvertScaleAbs273
